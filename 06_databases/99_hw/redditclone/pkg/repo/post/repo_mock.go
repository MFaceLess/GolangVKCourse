// Code generated by MockGen. DO NOT EDIT.
// Source: repo_interface.go

// Package repo is a generated GoMock package.
package repo

import (
	post "redditclone/pkg/post"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostRepo is a mock of PostRepo interface.
type MockPostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepoMockRecorder
}

// MockPostRepoMockRecorder is the mock recorder for MockPostRepo.
type MockPostRepoMockRecorder struct {
	mock *MockPostRepo
}

// NewMockPostRepo creates a new mock instance.
func NewMockPostRepo(ctrl *gomock.Controller) *MockPostRepo {
	mock := &MockPostRepo{ctrl: ctrl}
	mock.recorder = &MockPostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepo) EXPECT() *MockPostRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPostRepo) Add(postData post.DataPost, login, userID string) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", postData, login, userID)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPostRepoMockRecorder) Add(postData, login, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPostRepo)(nil).Add), postData, login, userID)
}

// AddComment mocks base method.
func (m *MockPostRepo) AddComment(postID, body, username, userID string) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", postID, body, username, userID)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockPostRepoMockRecorder) AddComment(postID, body, username, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPostRepo)(nil).AddComment), postID, body, username, userID)
}

// DeleteComment mocks base method.
func (m *MockPostRepo) DeleteComment(postID, commentID, username string) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", postID, commentID, username)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostRepoMockRecorder) DeleteComment(postID, commentID, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostRepo)(nil).DeleteComment), postID, commentID, username)
}

// DeletePostByID mocks base method.
func (m *MockPostRepo) DeletePostByID(postID, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostByID", postID, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostByID indicates an expected call of DeletePostByID.
func (mr *MockPostRepoMockRecorder) DeletePostByID(postID, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostByID", reflect.TypeOf((*MockPostRepo)(nil).DeletePostByID), postID, username)
}

// GetAll mocks base method.
func (m *MockPostRepo) GetAll() ([]post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPostRepoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPostRepo)(nil).GetAll))
}

// GetByCategory mocks base method.
func (m *MockPostRepo) GetByCategory(category string) ([]post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", category)
	ret0, _ := ret[0].([]post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockPostRepoMockRecorder) GetByCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockPostRepo)(nil).GetByCategory), category)
}

// GetByID mocks base method.
func (m *MockPostRepo) GetByID(id string) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPostRepoMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostRepo)(nil).GetByID), id)
}

// GetPostsByUsername mocks base method.
func (m *MockPostRepo) GetPostsByUsername(username string) ([]post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUsername", username)
	ret0, _ := ret[0].([]post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUsername indicates an expected call of GetPostsByUsername.
func (mr *MockPostRepoMockRecorder) GetPostsByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUsername", reflect.TypeOf((*MockPostRepo)(nil).GetPostsByUsername), username)
}

// VotePost mocks base method.
func (m *MockPostRepo) VotePost(postID, userID string, voteDirection int) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VotePost", postID, userID, voteDirection)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VotePost indicates an expected call of VotePost.
func (mr *MockPostRepoMockRecorder) VotePost(postID, userID, voteDirection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VotePost", reflect.TypeOf((*MockPostRepo)(nil).VotePost), postID, userID, voteDirection)
}
